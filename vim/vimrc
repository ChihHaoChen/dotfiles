call plug#begin('~/.vim/plugged')

" Syntax
Plug 'tpope/vim-git'
Plug 'vim-ruby/vim-ruby'
Plug 'elixir-lang/vim-elixir'
Plug 'jelera/vim-javascript-syntax'
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript'
Plug 'othree/html5.vim'
" haml also does Sass and SCSS
Plug 'tpope/vim-haml'
Plug 'chrisbra/csv.vim'
Plug 'leshill/vim-json'
Plug 'tpope/vim-markdown'
Plug 'andersoncustodio/vim-tmux'
Plug '1995eaton/vim-better-css-completion'
Plug '1995eaton/vim-better-javascript-completion'
Plug 'mustache/vim-mustache-handlebars'
Plug 'tpope/vim-cucumber'
Plug 'mxw/vim-jsx'
Plug 'digitaltoad/vim-jade'

"Clojure plugins from Jamie
Plug 'guns/vim-sexp', { 'for': 'clojure' }
Plug 'tpope/vim-sexp-mappings-for-regular-people', { 'for': 'clojure' }
Plug 'tpope/vim-leiningen', { 'for': 'clojure' }
Plug 'tpope/vim-classpath', { 'for': 'clojure' }
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'guns/vim-clojure-static', { 'for': 'clojure' }
Plug 'guns/vim-clojure-highlight', { 'for': 'clojure' }
Plug 'luochen1990/rainbow', { 'for': 'clojure' }

" Colour
Plug 'altercation/vim-colors-solarized'

" Actual Plugs
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-surround'
Plug 'kien/ctrlp.vim'
Plug 'SirVer/ultisnips'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-eunuch'
Plug 'editorconfig/editorconfig-vim'
Plug 'rking/ag.vim'
Plug 'jackfranklin/vim-markdown-writer'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-dispatch'
Plug 'xolox/vim-misc'
Plug 'ervandew/supertab'
Plug 'tpope/vim-projectionist'
Plug 'tpope/vim-fugitive'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'mattn/emmet-vim'
Plug 'ahw/vim-pbcopy'
Plug 'tpope/vim-ragtag'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-unimpaired'
Plug 'scrooloose/syntastic'
Plug 'gorkunov/smartpairs.vim'
Plug 'janko-m/vim-test'
Plug 'thinca/vim-visualstar'
Plug 'junegunn/vim-github-dashboard'
Plug 'takac/vim-hardtime'
Plug 'rhysd/committia.vim'

call plug#end()

let g:hardtime_default_on = 1

set nocompatible
filetype plugin indent on

runtime macros/matchit.vim
let loaded_matchparen = 1

" status bar
set statusline=%F%m%r%h%w\  "fullpath and status modified sign
set statusline+=\ %y "filetype
set statusline+=\ %{fugitive#statusline()}

" vim test config
let g:test#strategy = 'dispatch'

" passive = does not run on save
let g:syntastic_mode_map = { "mode": "passive",
                           \ "active_filetypes": [],
                           \ "passive_filetypes": [] }

" auto load files if vim detects they have been changed outside of Vim
set autoread

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=500 ttimeoutlen=100

"github dashboard
let g:github_dashboard = { 'username': 'jackfranklin', 'password': $GHDASHBOARD_TOKEN }

" allow unsaved background buffers and remember marks/undo for them
set hidden

" folding
nnoremap <Space> za
set nofoldenable
" set foldmethod=indent

" taken from https://github.com/dduponchel/dotfiles/blob/master/vim/vimrc
" Indicates a fast terminal connection.  More characters will be sent to
" the screen for redrawing, instead of using insert/delete line
" commands.  Improves smoothness of redrawing when there are multiple
" windows and the terminal does not support a scrolling region.
" Also enables the extra writing of characters at the end of each screen
" line for lines that wrap.  This helps when using copy/paste with the
" mouse in an xterm and other terminals.
set ttyfast

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" remember more commands and search history
set history=10000

" spaces > tabs.
" there, I said it.
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

" word count, taken from
" http://stackoverflow.com/questions/114431/fast-word-count-function-in-vim
function! WordCount()
  let s:old_status = v:statusmsg
  let position = getpos(".")
  exe ":silent normal g\<c-g>"
  let stat = v:statusmsg
  let s:word_count = 0
  if stat != '--No lines in buffer--'
    let s:word_count = str2nr(split(v:statusmsg)[11])
    let v:statusmsg = s:old_status
  end
  call setpos('.', position)
  return s:word_count
endfunction

set spelllang=en_gb
syntax spell toplevel

" set some markdown specific things
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0
autocmd FileType markdown setlocal statusline+=\ %{WordCount()}
autocmd FileType tex setlocal colorcolumn=0 wrap lbr linebreak spell


set laststatus=2

" break properly, don't split words
set linebreak

" show search matches as I type
set showmatch
set incsearch
set hlsearch

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" keep more context when scrolling off the end of a buffer
set scrolloff=5

" Store temporary files in a central spot
set nobackup
set nowritebackup
set noswapfile

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Enable highlighting for syntax
syntax on

syntax spell toplevel

set wildmode=full
" make tab completion for files/buffers act like bash
set wildmenu

let mapleader=","
noremap \ ,

" ignore git, npm modules and jekyll _site
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

" I like line numbers
set number
set relativenumber
set lazyredraw

" pretty colours
set t_Co=256
set background=light
" color solarized
color default

set colorcolumn=80

set list listchars=tab:»·,trail:·

" :Q to quit (should be default)
command! Q q

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" set up the mouse
" I know, mouse is bad, but this is useful purely for resizing splits visually
" http://usevim.com/2012/05/16/mouse/
set mouse=a
set ttymouse=xterm2

" per project vimrc
" http://andrew.stwrt.ca/posts/project-specific-vimrc
set exrc
set secure

" turn indentline off by default
let g:indentLine_enabled = 0

" settings for tags
set tags=./.tags;

let g:tex_flavor = "latex"

" ~~~ MAPPINGS BELOW ~~~

" TODO: make this better, more intelligent
function! JF_find_private()
  execute "/private"
endfunction

function! OpenProjectNotes()
  let directory = getcwd()
  let filename = '_projectnotes.txt'
  exec ':vsplit ' . directory . '/' . filename
endfunction


"gtfo ex mode
map Q <Nop>

map <leader>bb :Dispatch bundle install<cr>
map <leader>cf :CtrlPClearCache<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
map <leader>gf :e Gemfile<cr>
nnoremap <leader>h <Esc>:call ToggleHardMode()<CR>
nnoremap <leader>mt :call MW_MakeTwitterReferenceLink()<CR>
nnoremap <leader>mfi :call MW_ConvertFencedToIndent()<CR>
nnoremap <leader>my :call MW_YamlFrontMatter()<CR>
nnoremap <leader>ml :call MW_MakeWordLink()<CR>
map <Leader>nf :e <C-R>=expand("%:p:h") . "/" <CR>
map <leader>pv :call JF_find_private()<cr>
map <leader>pj :e package.json<cr>
map <leader>pt :CtrlPTag<cr>
nnoremap <leader>pn :call OpenProjectNotes()<cr>
nmap <silent> <leader>n :TestNearest<CR>
nmap <silent> <leader>e :TestFile<CR>
nmap <silent> <leader>l :TestLast<CR>
map <Leader>rn :Rename
map <leader>spj :vsplit package.json<cr>
map <leader>s :SyntasticCheck<CR>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>sp :vsplit ~/dotfiles/scratchpad<cr>
map <leader>sc :setlocal spell!<CR>
" if you have 2 splits open, the above toggle them between
" being vertical and horizontal
map <leader>sph <C-w>t<C-w>K<CR>
map <leader>spv <C-w>t<C-w>H<CR>
map <leader>t :CtrlP<cr>
map <leader>us :UltiSnipsEdit<CR>
map <leader>v :vsplit<CR>
" cleans up whitespace
" TODO extract this into FN which sets mark so it jumps back to where you were
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>
map <Leader>p :set paste<CR>o<esc>"*]p:set nopaste<cr>

" map saving and tabs to Control-"
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <C-q> <esc>:x<CR>
imap <C-q> <esc>:x<CR>
map <C-t> <esc>:tabnew<CR>

" make it do . in visual mode
vnoremap . :norm.<CR>

" control P
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|bower_components\'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_extensions = ['tag']

" navigating tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

" ultisnips settings
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
let g:UltiSnipsSnippetDirectories=["UltiSnips"]

"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>

" http://robots.thoughtbot.com/faster-grepping-in-vim/
" Use ag over grep
set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

noremap H ^
noremap L $
vnoremap L g_

" Uppercase word mapping.
"
" This mapping allows you to press <c-u> in insert mode to convert the current
" word to uppercase.  It's handy when you're writing names of constants and
" don't want to use Capslock.
"
" To use it you type the name of the constant in lowercase.  While your
" cursor is at the end of the word, press <c-u> to uppercase it, and then
" continue happily on your way:
inoremap <C-u> <esc>mzgUiw`za

" dont need the default ctrlp
let g:ctrlp_map = ''

" http://stackoverflow.com/questions/11042920/how-to-copy-and-paste-between-different-tmux-panes-running-vim-instances
" copy to buffer
vmap <C-c> :w! ~/.vimbuffer<CR>
nmap <C-c> :.w! ~/.vimbuffer<CR>
" paste from buffer
map <C-p> :r ~/.vimbuffer<CR>

let g:ruby_path = system('echo $HOME/.rbenv/shims')
