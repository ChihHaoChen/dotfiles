" pathogen plugins
call pathogen#infect()
call pathogen#helptags()

" non-pathogen plugins
runtime plugin/dragvisuals.vim
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

" status bar
set statusline=%F%m%r%h%w\  "fullpath and status modified sign
set statusline+=\ %y "filetype
set statusline+=\ %{fugitive#statusline()} "fugitive.vim
set statusline+=%= " this line bumps the line number to RHS
set statusline+=\ [%l\/%L] "line number and column number

" auto load files if vim detects they have been changed outside of Vim
set autoread

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=1000 ttimeoutlen=100

" it's 2013 yo
set nocompatible

" allow unsaved background buffers and remember marks/undo for them
set hidden

" taken from https://github.com/dduponchel/dotfiles/blob/master/vim/vimrc
" Indicates a fast terminal connection.  More characters will be sent to
" the screen for redrawing, instead of using insert/delete line
" commands.  Improves smoothness of redrawing when there are multiple
" windows and the terminal does not support a scrolling region.
" Also enables the extra writing of characters at the end of each screen
" line for lines that wrap.  This helps when using copy/paste with the
" mouse in an xterm and other terminals.
set ttyfast

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" remember more commands and search history
set history=10000

" spaces > tabs.
" there, I said it.
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

" set some markdown specific things
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist spell spelllang=en_gb wrap lbr

set laststatus=2

" break properly, don't split words
set linebreak

" use matchit plugin
" required for rubyblocks plugin
runtime macros/matchit.vim

set nofoldenable

" show search matches as I type
set showmatch
set incsearch
set hlsearch

" Don't wait so long for the next keypress (particularly in ambigious Leader
" situations. (via @r00k dotfiles)
set timeoutlen=500

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" keep more context when scrolling off the end of a buffer
set scrolloff=5

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" display incomplete commands
set showcmd

" Enable highlighting for syntax
syntax on

" Enable file type detection.
filetype plugin indent on

" use emacs-style tab completion when selecting files, etc
" set wildmode=longest,list
set wildmode=full
set wildmenu

" make tab completion for files/buffers act like bash
set wildmenu

" leader key
let mapleader=","

" ignore git, npm modules and jekyll _site
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip

" I like line numbers
set number

" pretty colours
set t_Co=256
colorscheme seoul256
" set background=dark
let &background=$ITERM_PROFILE


" highlight trailing whitespace
" highlight ExtraWhitespace ctermbg=red guibg=red
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" match ExtraWhitespace /\s\+$/
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd InsertLeave * match ExtraWhitespace /\s\+$/
" autocmd BufWinLeave * call clearmatches()
set list listchars=tab:»·,trail:·

" :Q to quit (should be default)
command! Q q


" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" clojure settings
let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#ParenRainbow = 1
let vimclojure#WantNailgun = 1

" set up the mouse
" I know, mouse is bad, but this is useful purely for resizing splits visually
" with mouse
" http://usevim.com/2012/05/16/mouse/
set ttyfast
set mouse=a
set ttymouse=xterm2

" YouCompleteMe Settings
let g:ycm_filetype_blacklist = {
      \ 'notes' : 1,
      \ 'markdown' : 1,
      \ 'text' : 1,
      \ 'gitcommit' : 1,
      \}
let g:ycm_complete_in_strings = 0
" ctags support
let g:ycm_collect_identifiers_from_tags_files = 1
" stop the annoying window at the bottom appearing
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_min_num_of_chars_for_completion = 3

let g:indentLine_enabled = 0

" ~~~ MAPPINGS BELOW ~~~

" CamelCase, better movement through vars
" https://github.com/vim-scripts/camelcasemotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

" Ruby dev mappings
" small func to find the private keyword
" TODO: make this better
function! JF_find_private()
  execute "/private"
endfunction

map <leader>bb :!bundle install<cr>
map <leader>rb :!ruby %<cr>
map <leader>gf :e Gemfile<cr>
map <leader>pv :call JF_find_private()<cr>


" some Node / JS Dev mappings
map <leader>ne :!node %<cr>
map <leader>nt :!npm test<cr>
map <leader>nmc :!mocha %<cr>
map <leader>pj :e package.json<cr>
map <leader>spj :vsplit package.json<cr>

" map saving and tabs to Control-"
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <C-t> <esc>:tabnew<CR>

" make the TCOmment toggle <leader>c
map <leader>c gcc

"remove all trailing whitespace with ,W
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>


" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j


" reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv


" make it do . in visual mode
vnoremap . :norm.<CR>

" control P
map <leader>t :CtrlP<cr>
map <leader>cf :CtrlPClearCache<cr>
map <leader>pt :CtrlPTag<cr>
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|bower_components\'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_extensions = ['tag']

" navigating tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
" https://github.com/r00k/dotfiles/blob/master/vimrc
set formatoptions-=or

" TODO: abstract big functions into own files?
" rename the current file
" https://github.com/r00k/dotfiles/blob/master/vimrc
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction
map <Leader>rn :call RenameFile()<cr>


" swap between paste mode or not with ,p
nnoremap <Leader>p :set invpaste paste?<CR>
set pastetoggle=<Leader>p


" easy vimrc editing
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" scratchpad
nnoremap <leader>sp :vsplit ~/dotfiles/scratchpad<cr>

" project notes
function! OpenProjectNotes()
  let directory = getcwd()
  let filename = '_projectnotes.txt'
  exec ':vsplit ' . directory . '/' . filename
endfunction

nnoremap <leader>pn :call OpenProjectNotes()<cr>

" insert blank line above
nmap <leader>bO O<Esc>j
" insert blank line below
nmap <leader>bo o<Esc>k

" vim-rspec mappings
map <Leader>rt :call RunCurrentSpecFile()<CR>
map <Leader>rs :call RunNearestSpec()<CR>
map <Leader>rl :call RunLastSpec()<CR>
map <Leader>ra :call RunAllSpecs()<CR>

"swap BG
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>

"tagbar
map <leader>ct :TagbarToggle<CR>
map <leader>ctp :TagbarTogglePause<CR>

" vim-markdown-writer
nnoremap <leader>mt :call MW_MakeTwitterReferenceLink()<CR>
nnoremap <leader>mfi :call MW_ConvertFencedToIndent()<CR>
nnoremap <leader>my :call MW_YamlFrontMatter()<CR>
nnoremap <leader>ml :call MW_MakeWordLink()<CR>
nnoremap <leader>mh1 :call MW_Heading(1)<CR>
nnoremap <leader>mh2 :call MW_Heading(2)<CR>
nnoremap <leader>mh3 :call MW_Heading(3)<CR>
nnoremap <leader>mh4 :call MW_Heading(4)<CR>
nnoremap <leader>mh5 :call MW_Heading(5)<CR>

" ultisnips settings so they don't compete with YCM
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets"]

" useful for showing snippets if you're not sure
map <leader>sp :echo UltiSnips_ListSnippets()<CR>

"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>

" The Silver Searcher
" taken from: http://robots.thoughtbot.com/faster-grepping-in-vim/
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " set up Ack.vim to actually use ag
  let g:ackprg = 'ag --nogroup --nocolor --column'

  " bind K to grep word under cursor
  nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>
endif
