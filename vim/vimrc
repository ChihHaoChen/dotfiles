" Vundle needs these things
set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Vundle has to manage Vundle.
Bundle 'gmarik/vundle'

" Syntax, colour schemes and the line
Bundle 'sheerun/vim-polyglot'
Bundle 'junegunn/seoul256.vim'

" Actual Plugins
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-git'
Bundle 'tpope/vim-surround'
Bundle 'tomtom/tcomment_vim'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'kien/ctrlp.vim'
Bundle 'SirVer/ultisnips'
Bundle 'christoomey/vim-tmux-navigator'
Bundle 'tpope/vim-rbenv'
Bundle 'tpope/vim-eunuch'
Bundle 'thoughtbot/vim-rspec'
Bundle 'junegunn/vim-easy-align'
Bundle 'editorconfig/editorconfig-vim'
Bundle 'Yggdroot/indentLine'
Bundle 'rking/ag.vim'
Bundle 'osyo-manga/vim-over'
Bundle 'elixir-lang/vim-elixir'
Bundle 'vim-scripts/camelcasemotion'
Bundle 'ervandew/supertab'
Bundle 'vim-ruby/vim-ruby'
Bundle 'jackfranklin/vim-markdown-writer'
Bundle 'xolox/vim-misc'
" easytags depends on vim-misc
Bundle 'xolox/vim-easytags'
Bundle 'taq/vim-git-branch-info'

" Enable file type detection. Do this after Vundle calls.
filetype plugin indent on

" status bar
set statusline=%F%m%r%h%w\  "fullpath and status modified sign
set statusline+=\ %y "filetype
let g:git_branch_status_text=' Git'
let g:git_branch_status_head_current=1
set statusline+=\ %{GitBranchInfoString()}
set statusline+=%= " this line bumps the line number to RHS
set statusline+=\ [%l\/%L] "line number and column number

" auto load files if vim detects they have been changed outside of Vim
set autoread

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

" fix slight delay after pressing ESC then O
" http://ksjoberg.com/vim-esckeys.html
" set noesckeys
set timeout timeoutlen=1000 ttimeoutlen=100

" it's 2013 yo
set nocompatible

" allow unsaved background buffers and remember marks/undo for them
set hidden

" taken from https://github.com/dduponchel/dotfiles/blob/master/vim/vimrc
" Indicates a fast terminal connection.  More characters will be sent to
" the screen for redrawing, instead of using insert/delete line
" commands.  Improves smoothness of redrawing when there are multiple
" windows and the terminal does not support a scrolling region.
" Also enables the extra writing of characters at the end of each screen
" line for lines that wrap.  This helps when using copy/paste with the
" mouse in an xterm and other terminals.
set ttyfast

" Resize splits when the window is resized
au VimResized * exe "normal! \<c-w>="

" remember more commands and search history
set history=10000

" spaces > tabs.
" there, I said it.
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

" set some markdown specific things
autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist spell spelllang=en_gb wrap lbr

set laststatus=2

" break properly, don't split words
set linebreak

" use matchit plugin
" required for rubyblocks plugin
runtime macros/matchit.vim

set nofoldenable

" show search matches as I type
set showmatch
set incsearch
set hlsearch

" Don't wait so long for the next keypress (particularly in ambigious Leader
" situations. (via @r00k dotfiles)
set timeoutlen=500

" make searches case-sensitive only if they contain upper-case characters
set ignorecase smartcase

" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" keep more context when scrolling off the end of a buffer
set scrolloff=5

" Store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" display incomplete commands
set showcmd

" Enable highlighting for syntax
syntax on

" use emacs-style tab completion when selecting files, etc
" set wildmode=longest,list
set wildmode=full
set wildmenu

" make tab completion for files/buffers act like bash
set wildmenu

" leader key
let mapleader=","

" ignore git, npm modules and jekyll _site
set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip

" I like line numbers
set number

" pretty colours
set t_Co=256
colorscheme seoul256
" set background=dark
let &background=$ITERM_PROFILE


" highlight trailing whitespace
" highlight ExtraWhitespace ctermbg=red guibg=red
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" match ExtraWhitespace /\s\+$/
" autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
" autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
" autocmd InsertLeave * match ExtraWhitespace /\s\+$/
" autocmd BufWinLeave * call clearmatches()
set list listchars=tab:»·,trail:·

" :Q to quit (should be default)
command! Q q


" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright


" clojure settings
let g:vimclojure#HighlightBuiltins = 1
let g:vimclojure#ParenRainbow = 1
let vimclojure#WantNailgun = 1

" vim gitgutter
let g:gitgutter_enabled = 0

" set up the mouse
" I know, mouse is bad, but this is useful purely for resizing splits visually
" with mouse
" http://usevim.com/2012/05/16/mouse/
set ttyfast
set mouse=a
set ttymouse=xterm2

" turn indentline off by default
let g:indentLine_enabled = 0

" settings for tags and vim-easytags
set tags=./tags;
" 2 = will use ./tags file, or create if it doesn't exist
let g:easytags_dynamic_files = 2

" ~~~ MAPPINGS BELOW ~~~

" CamelCase, better movement through vars
" https://github.com/vim-scripts/camelcasemotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

" rename the current file
" thanks Gary Bernhardt
function! RenameFile()
    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')
    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif
endfunction

" TODO: make this better, more intelligent
function! JF_find_private()
  execute "/private"
endfunction

function! OpenProjectNotes()
  let directory = getcwd()
  let filename = '_projectnotes.txt'
  exec ':vsplit ' . directory . '/' . filename
endfunction

map <leader>bb :!bundle install<cr>
map <Leader>bg :let &background = ( &background == "dark"? "light" : "dark" )<CR>
map <leader>c gcc
map <leader>cf :CtrlPClearCache<cr>
map <leader>ct :TagbarToggle<CR>
map <leader>ctp :TagbarTogglePause<CR>
map <leader>e :call JF_ExecuteCurrentFile()<CR>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
map <leader>gf :e Gemfile<cr>
map <leader>ls :echo UltiSnips_ListSnippets()<CR>
nnoremap <leader>mt :call MW_MakeTwitterReferenceLink()<CR>
nnoremap <leader>mfi :call MW_ConvertFencedToIndent()<CR>
nnoremap <leader>my :call MW_YamlFrontMatter()<CR>
nnoremap <leader>ml :call MW_MakeWordLink()<CR>
map <leader>nt :!npm test<cr>
nnoremap <Leader>p :set invpaste paste?<CR>
map <leader>pv :call JF_find_private()<cr>
map <leader>pj :e package.json<cr>
map <leader>pt :CtrlPTag<cr>
nnoremap <leader>pn :call OpenProjectNotes()<cr>
map <Leader>rn :call RenameFile()<cr>
map <Leader>rt :call RunCurrentSpecFile()<CR>
map <Leader>rs :call RunNearestSpec()<CR>
map <Leader>rl :call RunLastSpec()<CR>
map <Leader>ra :call RunAllSpecs()<CR>
map <leader>spj :vsplit package.json<cr>
map <leader>s :call JF_ExecuteRelevantTestFile()<CR>
nnoremap <leader>sv :source $MYVIMRC<cr>
nnoremap <leader>sp :vsplit ~/dotfiles/scratchpad<cr>
map <leader>sc :setlocal spell!<CR>
map <leader>sa :call JF_RunAllTests()<CR>
map <leader>sh <C-w>t<C-w>K<CR>
map <leader>sv <C-w>t<C-w>H<CR>
map <leader>t :CtrlP<cr>
map <leader>use :UltiSnipsEdit<CR>
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>

" map saving and tabs to Control-"
map <C-s> <esc>:w<CR>
imap <C-s> <esc>:w<CR>
map <C-t> <esc>:tabnew<CR>

" Make j/k move to next visual line instead of physical line
" http://yubinkim.com/?p=6
nnoremap k gk
nnoremap j gj
nnoremap gk k
nnoremap gj j

" reselect visual block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" make it do . in visual mode
vnoremap . :norm.<CR>

" control P
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|bower_components\'
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_extensions = ['tag']

" navigating tabs
nnoremap th  :tabfirst<CR>
nnoremap tj  :tabnext<CR>
nnoremap tk  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tn  :tabnext<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

" swap between paste mode or not with ,p
set pastetoggle=<Leader>p

" ultisnips settings so they don't compete with YCM
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsJumpForwardTrigger="<c-k>"
let g:UltiSnipsJumpBackwardTrigger="<s-c-j>"
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets"]

"This unsets the 'last search pattern' register by hitting return
nnoremap <CR> :noh<CR><CR>

" http://robots.thoughtbot.com/faster-grepping-in-vim/
" Use ag over grep
set grepprg=ag\ --nogroup\ --nocolor

" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR><CR>
