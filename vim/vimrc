call plug#begin('~/.vim/plugged')

" Syntax
Plug 'tpope/vim-git'
Plug 'vim-ruby/vim-ruby'
Plug 'moll/vim-node'
Plug 'pangloss/vim-javascript', { 'branch': 'develop' }

Plug 'othree/html5.vim'
Plug 'leshill/vim-json'
Plug 'tpope/vim-markdown'
Plug 'mustache/vim-mustache-handlebars'
Plug 'mxw/vim-jsx'
Plug 'ElmCast/elm-vim'
Plug 'leafgarland/typescript-vim'
" does EJS files
Plug 'briancollins/vim-jst'
Plug 'fatih/vim-go'
Plug 'elixir-lang/vim-elixir'
Plug 'posva/vim-vue'

" Actual Plugs
Plug 'tpope/vim-surround'
Plug 'christoomey/vim-tmux-navigator'
Plug 'tpope/vim-rbenv'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'editorconfig/editorconfig-vim'
Plug 'rking/ag.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-ragtag'
Plug 'AndrewRadev/splitjoin.vim'
Plug 'tpope/vim-rails'
Plug 'tpope/vim-unimpaired'
Plug 'gorkunov/smartpairs.vim'
Plug 'thinca/vim-visualstar'
Plug 'christoomey/vim-tmux-runner'
Plug 'thoughtbot/vim-rspec'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-emoji'
Plug 'neomake/neomake'
Plug 'Shougo/unite.vim'
Plug 'Shougo/vimfiler.vim'
Plug 'jordwalke/VimAutoMakeDirectory'

Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'Shougo/neosnippet'

" Colours
Plug 'ajh17/Spacegray.vim'
Plug 'altercation/vim-colors-solarized'

call plug#end()

filetype plugin indent on

" Allow JSX in normal JS files
let g:jsx_ext_required = 0

" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

runtime macros/matchit.vim

" wrap quickfix window
autocmd FileType qf setlocal wrap linebreak

autocmd BufNewFile,BufRead .babelrc setlocal filetype=json
autocmd BufNewFile,BufRead .eslintrc setlocal filetype=json
" status bar
set statusline=%F%m%r%h%w\  "fullpath and status modified sign
set statusline+=\ %y "filetype
set statusline+=\ %{fugitive#statusline()}

" assume the /g flag on :s substitutions to replace all matches in a line
set gdefault

set autoread

set breakindent

" fix slight delay after pressing ESC then O http://ksjoberg.com/vim-esckeys.html
set timeout timeoutlen=500 ttimeoutlen=100


set history=10000

set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set autoindent

set ignorecase smartcase

set spelllang=en_gb
syntax spell toplevel

autocmd FileType markdown setlocal shiftwidth=4 softtabstop=4 tabstop=4 wrap linebreak nolist wrap lbr colorcolumn=0 synmaxcol=999999
autocmd FileType elm setlocal shiftwidth=4 softtabstop=4 tabstop=4

" ruby syntax highlighting is slower with the newer engine
autocmd FileType ruby setlocal regexpengine=1

set laststatus=2

set linebreak

set incsearch
set hlsearch

set scrolloff=5

set nobackup
set nowritebackup
set noswapfile

set backspace=indent,eol,start

set wildmode=full
set wildmenu

set foldmethod=syntax

let mapleader=","
noremap \ ,

set wildignore+=*.o,*.obj,.git,node_modules,_site,*.class,*.zip,*.aux

set number
set relativenumber

colorscheme spacegray

set colorcolumn=80
set cursorline
hi cursorline cterm=none term=none
autocmd WinEnter * setlocal cursorline
autocmd WinLeave * setlocal nocursorline
highlight CursorLine ctermbg=235
highlight ColorColumn ctermbg=235

" clear highlights by hitting ESC
" or by hitting enter in normal mode
nnoremap <esc> :noh<return><esc>
nnoremap <CR> :noh<CR><CR>

set list listchars=tab:»·,trail:·

command! Q q

set splitbelow
set splitright

set tags=./.tags;

" Stop Vim dying if there's massively long lines.
set synmaxcol=500

" https://alexpearce.me/2014/05/italics-in-iterm2-vim-tmux/
" has to go after all theme declarations
highlight Comment cterm=italic
autocmd FileType javascript.jsx highlight xmlAttrib cterm=italic

" ~~~ MAPPINGS BELOW ~~~

"gtfo ex mode
map Q <Nop>

" Rspec.vim
let g:rspec_command = "call VtrSendCommand('rspec {spec}', 1)"
map <Leader>e :call RunCurrentSpecFile()<CR>
map <Leader>n :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>

" new file in current directory
map <Leader>nf :e <C-R>=expand("%:p:h") . "/" <CR>

" toggle spellcheck
map <leader>sc :setlocal spell!<CR>

map <leader>v :vsplit<CR>

" clean up any trailing whitespace
nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<cr>

nnoremap <leader>fr :VtrFocusRunner<cr>
nnoremap <leader>kr :VtrKillRunner<cr>
nnoremap <leader>rr :VtrSendLinesToRunner<cr>
nnoremap <leader>dr :VtrSendCtrlD<cr>
nnoremap <leader>ar :VtrAttachToPane<cr>

" Don't add the comment prefix when I hit enter or o/O on a comment line.
autocmd FileType * setlocal formatoptions-=r formatoptions-=o

imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)
let g:neosnippet#disable_runtime_snippets = { '_': 1 }
let g:neosnippet#snippets_directory=['~/.config/nvim/UltiSnips']


" let g:UltiSnipsExpandTrigger="<c-k>"

" let g:UltiSnipsSnippetDirectories = ['~/.config/nvim/UltiSnips', 'UltiSnips']

" http://robots.thoughtbot.com/faster-grepping-in-vim/
set grepprg=ag\ --nogroup\ --nocolor

" stolen from https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" Keep search matches in the middle of the window.
nnoremap n nzzzv
nnoremap N Nzzzv

noremap H ^
noremap L $

" http://blog.petrzemek.net/2016/04/06/things-about-vim-i-wish-i-knew-earlier/
" better jk normally but don't remap when it's called with a count
noremap <silent> <expr> j (v:count == 0 ? 'gj' : 'j')
noremap <silent> <expr> k (v:count == 0 ? 'gk' : 'k')

" FZF.vim
nnoremap <leader>t :Files<cr>
nnoremap <leader>b :Buffers<cr>

nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)

let g:fzf_prefer_tmux = 1

" Elm.vim settings
let g:elm_format_autosave = 1
let g:elm_setup_keybindings = 0

" reset cursor position on files, if it's remembered
" but don't do it for gitcommit file types
autocmd BufReadPost * if &filetype != "gitcommit" && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" make copy/paste from system clip easier
vnoremap <leader>8 "*y
vnoremap <leader>9 "*p
nnoremap <leader>8 "*p

" easier emojis!
set completefunc=emoji#complete

if has('nvim')
  let g:neomake_javascript_enabled_makers = []
  let g:has_setup_makers = 0
  let g:neomake_highlight_columns=0

  " lots of the below taken from github.com/alexbooker/dotfiles
  let g:has_local_eslint = 0
  let g:found_no_eslint = 0
  let g:eslint_executable = 'eslint'

  function! FindEsLintOnLoad()
    if g:has_local_eslint == 1
      return
    endif

    if g:found_no_eslint == 1
      " we checked for eslint, but it's not configured for this project
      " so no point checking again
      return
    endif

    let l:npm_bin = ''
    if executable('npm')
       let l:npm_bin = split(system('npm bin'), '\n')[0]
    endif
    if strlen(l:npm_bin) && executable(l:npm_bin . '/eslint')
      let g:has_local_eslint = 1
      let g:eslint_executable = l:npm_bin . '/eslint'
    else
      let g:found_no_eslint = 1
    endif
  endfunction


  function! ConfigNeoMakeEsLint()
    call FindEsLintOnLoad()
    if g:has_local_eslint == 1
      let g:neomake_javascript_eslint_exe = g:eslint_executable
      call add(g:neomake_javascript_enabled_makers, 'eslint')
    endif
  endfunction

  function! StrTrim(txt)
    return substitute(a:txt, '^\n*\s*\(.\{-}\)\n*\s*$', '\1', '')
  endfunction

  let g:flow_path = StrTrim(system('PATH=$(npm bin):$PATH && which flow'))

  " from https://github.com/ryyppy/flow-vim-quickfix
  function! ConfigNeoMakeFlow()
    if findfile('.flowconfig', '.;') !=# ''
      let g:flow_path = StrTrim(system('PATH=$(npm bin):$PATH && which flow'))
      if g:flow_path != 'flow not found'
        let g:neomake_javascript_flow_maker = {
              \ 'exe': 'sh',
              \ 'args': ['-c', g:flow_path.' --json 2> /dev/null | flow-vim-quickfix'],
              \ 'errorformat': '%E%f:%l:%c\,%n: %m',
              \ 'cwd': '%:p:h' 
              \ }
        let g:neomake_javascript_enabled_makers = g:neomake_javascript_enabled_makers + [ 'flow']
      endif
  endif

  endfunction

  function! ConfigNeomake()
    if g:has_setup_makers == 1
      return
    endif
    call ConfigNeoMakeEsLint()
    call ConfigNeoMakeFlow()
    let g:neomake_jsx_enabled_makers = g:neomake_javascript_enabled_makers
  " This is kinda useful to prevent Neomake from unnecessary runs
    if !empty(g:neomake_javascript_enabled_makers)
      autocmd! BufWritePost * Neomake
      autocmd! BufWritePost *.jsx Neomake
    endif
    let g:has_setup_makers = 1
  endfunction

  autocmd FileType javascript :call ConfigNeomake()
endif

" VimFiler configuration
let g:vimfiler_as_default_explorer = 1
nnoremap - :VimFilerBufferDir<CR>
let g:vimfiler_ignore_pattern = ['^\.git$', '^\.DS_Store$']
let g:vimfiler_safe_mode_by_default = 0
let g:vimfiler_no_default_key_mappings = 1

function! s:apply_vimfiler_win_settings()
  setlocal nonumber norelativenumber
  nmap <buffer> - <Plug>(vimfiler_smart_h)
  nmap <buffer> j <Plug>(vimfiler_loop_cursor_down)
  nmap <buffer> k <Plug>(vimfiler_loop_cursor_up)
  nmap <buffer> gg <Plug>(vimfiler_cursor_top)
  nmap <buffer> <Enter> <Plug>(vimfiler_cd_or_edit)
  nmap <buffer> q <Plug>(vimfiler_exit)
  nmap <buffer> d <Plug>(vimfiler_delete_file)
  nmap <buffer> c <Plug>(vimfiler_copy_file)
  nmap <buffer> m <Plug>(vimfiler_move_file)
  nmap <buffer> r <Plug>(vimfiler_rename_file)
  nmap <buffer> n <Plug>(vimfiler_new_file)
  nmap <buffer> D <Plug>(vimfiler_new_directory)
endfunction
autocmd FileType vimfiler call s:apply_vimfiler_win_settings()

" toggle folds with space
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
set foldlevel=99999
let g:javascript_plugin_flow = 1

" expand all folds when entering a file
autocmd BufWinEnter * silent! :%foldopen!
